//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/sun_t/BotegyApp/Assets/Scripts/CodeParser\ParserGrammar.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ParserGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, NUMBER=11, STRING=12, WS=13, ADD=14, SUB=15, MUL=16, DIV=17, 
		MOD=18, AND=19, OR=20, BIT_AND=21, BIT_OR=22, GE=23, LE=24, NEQUALS=25, 
		EQUALS=26, GT=27, LT=28;
	public const int
		RULE_ident = 0, RULE_call = 1, RULE_group = 2, RULE_mult = 3, RULE_add = 4, 
		RULE_compare1 = 5, RULE_compare2 = 6, RULE_logical_and = 7, RULE_logical_or = 8, 
		RULE_expr = 9, RULE_assign = 10, RULE_simple_stmt = 11, RULE_composite = 12, 
		RULE_if = 13, RULE_while = 14, RULE_stmt = 15, RULE_stmt_list = 16, RULE_program = 17;
	public static readonly string[] ruleNames = {
		"ident", "call", "group", "mult", "add", "compare1", "compare2", "logical_and", 
		"logical_or", "expr", "assign", "simple_stmt", "composite", "if", "while", 
		"stmt", "stmt_list", "program"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'='", "'{'", "'}'", "'if'", "'else'", "'while'", 
		"';'", null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", 
		"'&'", "'|'", "'>='", "'<='", "'!='", "'=='", "'>'", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "NUMBER", 
		"STRING", "WS", "ADD", "SUB", "MUL", "DIV", "MOD", "AND", "OR", "BIT_AND", 
		"BIT_OR", "GE", "LE", "NEQUALS", "EQUALS", "GT", "LT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParserGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParserGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ParserGrammarParser.STRING, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 0, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 2, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ident();
			State = 39;
			Match(T__0);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 40;
				expr();
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 41;
					Match(T__1);
					State = 42;
					expr();
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 50;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
	 
		public GroupContext() { }
		public virtual void CopyFrom(GroupContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionContext : GroupContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public FunctionContext(GroupContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracesContext : GroupContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BracesContext(GroupContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterBraces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitBraces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraces(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : GroupContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public IdentifierContext(GroupContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueContext : GroupContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ParserGrammarParser.NUMBER, 0); }
		public ValueContext(GroupContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 4, RULE_group);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new ValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new BracesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				Match(T__0);
				State = 54;
				expr();
				State = 55;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new FunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				call();
				}
				break;
			case 4:
				_localctx = new IdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 58;
				ident();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ParserGrammarParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ParserGrammarParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ParserGrammarParser.MOD, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		return mult(0);
	}

	private MultContext mult(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultContext _localctx = new MultContext(Context, _parentState);
		MultContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_mult, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 62;
			group();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 69;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_mult);
					State = 64;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 65;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 66;
					group();
					}
					} 
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ParserGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ParserGrammarParser.SUB, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		return add(0);
	}

	private AddContext add(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AddContext _localctx = new AddContext(Context, _parentState);
		AddContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_add, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 73;
			mult(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_add);
					State = 75;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 76;
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==SUB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 77;
					mult(0);
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Compare1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddContext[] add() {
			return GetRuleContexts<AddContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add(int i) {
			return GetRuleContext<AddContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ParserGrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ParserGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ParserGrammarParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ParserGrammarParser.LE, 0); }
		public Compare1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterCompare1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitCompare1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compare1Context compare1() {
		Compare1Context _localctx = new Compare1Context(Context, State);
		EnterRule(_localctx, 10, RULE_compare1);
		int _la;
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				add(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				add(0);
				State = 85;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GE) | (1L << LE) | (1L << GT) | (1L << LT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 86;
				add(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compare1Context[] compare1() {
			return GetRuleContexts<Compare1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compare1Context compare1(int i) {
			return GetRuleContext<Compare1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ParserGrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQUALS() { return GetToken(ParserGrammarParser.NEQUALS, 0); }
		public Compare2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterCompare2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitCompare2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compare2Context compare2() {
		Compare2Context _localctx = new Compare2Context(Context, State);
		EnterRule(_localctx, 12, RULE_compare2);
		int _la;
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				compare1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				compare1();
				State = 92;
				_la = TokenStream.LA(1);
				if ( !(_la==NEQUALS || _la==EQUALS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 93;
				compare1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compare2Context compare2() {
			return GetRuleContext<Compare2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_andContext logical_and() {
			return GetRuleContext<Logical_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ParserGrammarParser.AND, 0); }
		public Logical_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterLogical_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitLogical_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_andContext logical_and() {
		return logical_and(0);
	}

	private Logical_andContext logical_and(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_andContext _localctx = new Logical_andContext(Context, _parentState);
		Logical_andContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_logical_and, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 98;
			compare2();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_andContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_and);
					State = 100;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 101;
					Match(AND);
					State = 102;
					compare2();
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_andContext logical_and() {
			return GetRuleContext<Logical_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_orContext logical_or() {
			return GetRuleContext<Logical_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ParserGrammarParser.OR, 0); }
		public Logical_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterLogical_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitLogical_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_orContext logical_or() {
		return logical_or(0);
	}

	private Logical_orContext logical_or(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_orContext _localctx = new Logical_orContext(Context, _parentState);
		Logical_orContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_logical_or, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 109;
			logical_and(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_orContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_or);
					State = 111;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 112;
					Match(OR);
					State = 113;
					logical_and(0);
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_orContext logical_or() {
			return GetRuleContext<Logical_orContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			logical_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 20, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ident();
			State = 122;
			Match(T__3);
			State = 123;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public Simple_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterSimple_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitSimple_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_stmtContext simple_stmt() {
		Simple_stmtContext _localctx = new Simple_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_simple_stmt);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				assign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		public CompositeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterComposite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitComposite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeContext composite() {
		CompositeContext _localctx = new CompositeContext(Context, State);
		EnterRule(_localctx, 24, RULE_composite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(T__4);
			State = 130;
			stmt_list();
			State = 131;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 26, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(T__6);
			State = 134;
			Match(T__0);
			State = 135;
			expr();
			State = 136;
			Match(T__2);
			State = 137;
			stmt();
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 138;
				Match(T__7);
				State = 139;
				stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 28, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__8);
			State = 143;
			Match(T__0);
			State = 144;
			expr();
			State = 145;
			Match(T__2);
			State = 146;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtContext simple_stmt() {
			return GetRuleContext<Simple_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositeContext composite() {
			return GetRuleContext<CompositeContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_stmt);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				simple_stmt();
				State = 149;
				Match(T__9);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				@if();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				@while();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 153;
				composite();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterStmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitStmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_listContext stmt_list() {
		Stmt_listContext _localctx = new Stmt_listContext(Context, State);
		EnterRule(_localctx, 32, RULE_stmt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << STRING))) != 0)) {
				{
				{
				State = 156;
				stmt();
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__9) {
					{
					{
					State = 157;
					Match(T__9);
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserGrammarListener typedListener = listener as IParserGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserGrammarVisitor<TResult> typedVisitor = visitor as IParserGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 34, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			stmt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return mult_sempred((MultContext)_localctx, predIndex);
		case 4: return add_sempred((AddContext)_localctx, predIndex);
		case 7: return logical_and_sempred((Logical_andContext)_localctx, predIndex);
		case 8: return logical_or_sempred((Logical_orContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mult_sempred(MultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool add_sempred(AddContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_and_sempred(Logical_andContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_or_sempred(Logical_orContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,28,171,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,44,8,1,10,
		1,12,1,47,9,1,3,1,49,8,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,60,8,
		2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,68,8,3,10,3,12,3,71,9,3,1,4,1,4,1,4,1,4,
		1,4,1,4,5,4,79,8,4,10,4,12,4,82,9,4,1,5,1,5,1,5,1,5,1,5,3,5,89,8,5,1,6,
		1,6,1,6,1,6,1,6,3,6,96,8,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,104,8,7,10,7,12,
		7,107,9,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,115,8,8,10,8,12,8,118,9,8,1,9,1,
		9,1,10,1,10,1,10,1,10,1,11,1,11,3,11,128,8,11,1,12,1,12,1,12,1,12,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,3,13,141,8,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,155,8,15,1,16,1,16,5,16,159,8,16,
		10,16,12,16,162,9,16,5,16,164,8,16,10,16,12,16,167,9,16,1,17,1,17,1,17,
		0,4,6,8,14,16,18,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,0,4,
		1,0,16,18,1,0,14,15,2,0,23,24,27,28,1,0,25,26,170,0,36,1,0,0,0,2,38,1,
		0,0,0,4,59,1,0,0,0,6,61,1,0,0,0,8,72,1,0,0,0,10,88,1,0,0,0,12,95,1,0,0,
		0,14,97,1,0,0,0,16,108,1,0,0,0,18,119,1,0,0,0,20,121,1,0,0,0,22,127,1,
		0,0,0,24,129,1,0,0,0,26,133,1,0,0,0,28,142,1,0,0,0,30,154,1,0,0,0,32,165,
		1,0,0,0,34,168,1,0,0,0,36,37,5,12,0,0,37,1,1,0,0,0,38,39,3,0,0,0,39,48,
		5,1,0,0,40,45,3,18,9,0,41,42,5,2,0,0,42,44,3,18,9,0,43,41,1,0,0,0,44,47,
		1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,48,40,
		1,0,0,0,48,49,1,0,0,0,49,50,1,0,0,0,50,51,5,3,0,0,51,3,1,0,0,0,52,60,5,
		11,0,0,53,54,5,1,0,0,54,55,3,18,9,0,55,56,5,3,0,0,56,60,1,0,0,0,57,60,
		3,2,1,0,58,60,3,0,0,0,59,52,1,0,0,0,59,53,1,0,0,0,59,57,1,0,0,0,59,58,
		1,0,0,0,60,5,1,0,0,0,61,62,6,3,-1,0,62,63,3,4,2,0,63,69,1,0,0,0,64,65,
		10,1,0,0,65,66,7,0,0,0,66,68,3,4,2,0,67,64,1,0,0,0,68,71,1,0,0,0,69,67,
		1,0,0,0,69,70,1,0,0,0,70,7,1,0,0,0,71,69,1,0,0,0,72,73,6,4,-1,0,73,74,
		3,6,3,0,74,80,1,0,0,0,75,76,10,1,0,0,76,77,7,1,0,0,77,79,3,6,3,0,78,75,
		1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,9,1,0,0,0,82,80,1,
		0,0,0,83,89,3,8,4,0,84,85,3,8,4,0,85,86,7,2,0,0,86,87,3,8,4,0,87,89,1,
		0,0,0,88,83,1,0,0,0,88,84,1,0,0,0,89,11,1,0,0,0,90,96,3,10,5,0,91,92,3,
		10,5,0,92,93,7,3,0,0,93,94,3,10,5,0,94,96,1,0,0,0,95,90,1,0,0,0,95,91,
		1,0,0,0,96,13,1,0,0,0,97,98,6,7,-1,0,98,99,3,12,6,0,99,105,1,0,0,0,100,
		101,10,1,0,0,101,102,5,19,0,0,102,104,3,12,6,0,103,100,1,0,0,0,104,107,
		1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,15,1,0,0,0,107,105,1,0,0,0,
		108,109,6,8,-1,0,109,110,3,14,7,0,110,116,1,0,0,0,111,112,10,1,0,0,112,
		113,5,20,0,0,113,115,3,14,7,0,114,111,1,0,0,0,115,118,1,0,0,0,116,114,
		1,0,0,0,116,117,1,0,0,0,117,17,1,0,0,0,118,116,1,0,0,0,119,120,3,16,8,
		0,120,19,1,0,0,0,121,122,3,0,0,0,122,123,5,4,0,0,123,124,3,18,9,0,124,
		21,1,0,0,0,125,128,3,20,10,0,126,128,3,2,1,0,127,125,1,0,0,0,127,126,1,
		0,0,0,128,23,1,0,0,0,129,130,5,5,0,0,130,131,3,32,16,0,131,132,5,6,0,0,
		132,25,1,0,0,0,133,134,5,7,0,0,134,135,5,1,0,0,135,136,3,18,9,0,136,137,
		5,3,0,0,137,140,3,30,15,0,138,139,5,8,0,0,139,141,3,30,15,0,140,138,1,
		0,0,0,140,141,1,0,0,0,141,27,1,0,0,0,142,143,5,9,0,0,143,144,5,1,0,0,144,
		145,3,18,9,0,145,146,5,3,0,0,146,147,3,30,15,0,147,29,1,0,0,0,148,149,
		3,22,11,0,149,150,5,10,0,0,150,155,1,0,0,0,151,155,3,26,13,0,152,155,3,
		28,14,0,153,155,3,24,12,0,154,148,1,0,0,0,154,151,1,0,0,0,154,152,1,0,
		0,0,154,153,1,0,0,0,155,31,1,0,0,0,156,160,3,30,15,0,157,159,5,10,0,0,
		158,157,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,164,
		1,0,0,0,162,160,1,0,0,0,163,156,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,
		0,165,166,1,0,0,0,166,33,1,0,0,0,167,165,1,0,0,0,168,169,3,32,16,0,169,
		35,1,0,0,0,14,45,48,59,69,80,88,95,105,116,127,140,154,160,165
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
